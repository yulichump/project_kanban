// üéØ –¢–û–ß–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê - –ö–û–ü–ò–†–£–ô –ò –†–ê–ë–û–¢–ê–ô!
import React, { useState } from 'react';

const DragDropComponent = () => {
  // === 1. –î–ê–ù–ù–´–ï ===
  const [tasks, setTasks] = useState({
    todo: [{id: 1, text: '–ó–∞–¥–∞—á–∞ 1'}],
    progress: [],
    done: []
  });
  const [draggedItem, setDraggedItem] = useState(null);

  // === 2. –§–£–ù–ö–¶–ò–ò - 3 –û–°–ù–û–í–ù–´–ï ===
  
  // –§—É–Ω–∫—Ü–∏—è 1: –ù–ê–ß–ê–õ–û –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
  const handleDragStart = (e, task, fromColumn) => {
    setDraggedItem({...task, fromColumn});
    e.dataTransfer.effectAllowed = 'move';
  };

  // –§—É–Ω–∫—Ü–∏—è 2: –ü–ï–ù–û–° –Ω–∞–¥ –æ–±–ª–∞—Å—Ç—å—é
  const handleDragOver = (e) => {
    e.preventDefault(); // ‚ö° –í–ê–ñ–ù–û!
  };

  // –§—É–Ω–∫—Ü–∏—è 3: –ë–†–û–°–ê–ï–ú —ç–ª–µ–º–µ–Ω—Ç
  const handleDrop = (e, toColumn) => {
    e.preventDefault();
    
    if (!draggedItem) return;
    
    setTasks(prev => {
      // –£–î–ê–õ–ò–¢–¨ –∏–∑ —Å—Ç–∞—Ä–æ–π –∫–æ–ª–æ–Ω–∫–∏
      const newTasks = {...prev};
      newTasks[draggedItem.fromColumn] = 
        newTasks[draggedItem.fromColumn].filter(t => t.id !== draggedItem.id);
      
      // –î–û–ë–ê–í–ò–¢–¨ –≤ –Ω–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É
      newTasks[toColumn] = [...newTasks[toColumn], {
        ...draggedItem,
        fromColumn: undefined
      }];
      
      return newTasks;
    });
    
    setDraggedItem(null);
  };

  // === 3. –ò–ù–¢–ï–†–§–ï–ô–° ===
  return (
    <div className="columns">
      {/* –ö–æ–ª–æ–Ω–∫–∞ 1 */}
      <div 
        className="column"
        onDragOver={handleDragOver}
        onDrop={(e) => handleDrop(e, 'todo')}
      >
        <h3>To Do</h3>
        {tasks.todo.map(task => (
          <div
            key={task.id}
            draggable
            onDragStart={(e) => handleDragStart(e, task, 'todo')}
            className="task"
          >
            {task.text}
          </div>
        ))}
      </div>
      
      {/* –ö–æ–ª–æ–Ω–∫–∞ 2 */}  
      <div 
        className="column"
        onDragOver={handleDragOver}
        onDrop={(e) => handleDrop(e, 'progress')}
      >
        <h3>In Progress</h3>
        {tasks.progress.map(task => (
          <div
            key={task.id}
            draggable
            onDragStart={(e) => handleDragStart(e, task, 'progress')}
            className="task"
          >
            {task.text}
          </div>
        ))}
      </div>
      
      {/* –ö–æ–ª–æ–Ω–∫–∞ 3 */}
      <div 
        className="column" 
        onDragOver={handleDragOver}
        onDrop={(e) => handleDrop(e, 'done')}
      >
        <h3>Done</h3>
        {tasks.done.map(task => (
          <div
            key={task.id}
            draggable
            onDragStart={(e) => handleDragStart(e, task, 'done')}
            className="task"
          >
            {task.text}
          </div>
        ))}
      </div>
    </div>
  );
};

export default DragDropComponent;